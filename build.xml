<?xml version="1.0" encoding="UTF-8"?>
<project name="adam_core" default="jar" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!-- For building the standalone version: the jars in libs.res have to start with ${libfolder}/ and 
         the classes have to start with ${dependenciesfolder}, or ${frameworkfolder}. -->

<!--  %%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROPERTIES %%%%%%%%%%%%%%%%%%%%%%%%%%% -->	
	<dirname property="core.basedir" file="${ant.file.adam_core}"/>

<!--  %%%%%%%%%%%%%%%%%%%%%%%%%%%%% IMPORTS %%%%%%%%%%%%%%%%%%%%%%%%%%% -->	
    <property name="subproject.basedir" value="${core.basedir}"/>
	<property file="${subproject.basedir}/build.properties" prefix="adam"/>
    <!-- get the correct folder for the dependencies depending on whether we build it as the main project of as a dependency itselve -->
    <available file="${adam.dependenciesfolder.asMainProject}/" type="dir" property="isMainProject"/>
    <available file="${adam.dependenciesfolder.asDependency}" type="dir" property="isDependency"/>
    <property if:set="isMainProject" name="dependenciesfolder" value="${adam.dependenciesfolder.asMainProject}"/>
    <property if:set="isDependency" name="dependenciesfolder" value="${adam.dependenciesfolder.asDependency}"/>
    <!-- now load the property file again to correctly expand the ${dependencyfolder}. Standard ant doesn't allow overwriting properties,
        thus, we loaded it above with a prefix -->
	<property file="${subproject.basedir}/build.properties"/>

	<import file="${frameworkfolder}/build_macros.xml" optional="false"/>
	<include file="${frameworkfolder}/build_targets.xml" as="core.fu" optional="false"/>

<!--  %%%%%%%%%%%%%%%%%%%%%%%%%%%%% PATHs %%%%%%%%%%%%%%%%%%%%%%%%%%% -->	
	
	<union id="core.jar.res">    			
<!--			<zipfileset includes="**/*.class" src="${mainfolder}/lib/apt/apt.jar"/>
			<zipfileset includes="**/*.stg" src="${mainfolder}/lib/apt/apt.jar"/>-->
<!--			<zipfileset includes="**/*.class" src="${logics.basedir}/lib/apt/apt-module.jar"/>
			<zipfileset includes="**/*.class" src="${logics.basedir}/lib/apt/apt-lib.jar"/>
			<zipfileset includes="**/*.class" src="${logics.basedir}/lib/apt/apt-io.jar"/>
			<zipfileset includes="**/*.stg" src="${logics.basedir}/lib/apt/apt-io.jar"/>-->
	</union>

<!--  %%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROPERTIES %%%%%%%%%%%%%%%%%%%%%%%%%%% -->	
	<target name="loadProperties">
		<property file="${subproject.basedir}/build.properties"/>		
	</target>

<!--  %%%%%%%%%%%%%%%%%%%%%%%%%%%%% DELEGATES %%%%%%%%%%%%%%%%%%%%%%%%%%% -->	
	<target name="test" depends="loadProperties" description="Runs all tests">
		<antcall target="core.fu.test"/>
			<!--<ant antfile="${logics.basedir}/build_logics.xml" target="test"></ant>	-->	
	</target>
	<target name="test-method" depends="loadProperties" description="Runs the tests of a specific method">
		<antcall target="core.fu.test-method"/>
	</target>
	<target name="test-class" depends="loadProperties" description="Runs the tests of a specific class">
		<antcall target="core.fu.test-class"/>
	</target>
	<target name="javac" depends="loadProperties" description="Compiles the module">
		<antcall target="core.fu.javac"/>
	</target>
	<target name="jar" depends="loadProperties" description="Builds a jar with all its dependencies">
		<antcall target="core.fu.jar"/>
	</target>
	<target name="jar-standalone" depends="loadProperties" description="Builds a jar with all its dependencies">
		<antcall target="core.fu.jar-standalone"/>
	</target>
	<target name="javadoc" depends="loadProperties" description="Creates the JavaDoc of this package.">
		<antcall target="core.fu.javadoc"/>
	</target>

	<target name="clean" depends="loadProperties" description="Cleans all temporary files.">
		<antcall target="core.fu.clean"/>
	</target>
	<target name="clean-all" depends="loadProperties" description="Cleans all temporary files including the reports">
		<antcall target="core.fu.clean-all"/>
		<delete file="adam_mc.jar" failonerror="false"/>
		<delete file="adam_synt.jar" failonerror="false"/>
		<delete file="adam_bounded.jar" failonerror="false"/>
	</target>

    <target name="deploy" depends="clean-all" description="Builds a jar with all its dependencies for the webinterface">
        <antcall target="jar-standalone" />
		<jar destfile="adam_core.jar">
			<zipfileset includes="**/*.class" src="./adam_core-standalone.jar"
                 excludes="**/main/**"/>
			<zipfileset includes="**/*.stg" src="./adam_core-standalone.jar"/>
		</jar>	
	</target>

<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%% TARGETS FOR THE SINGLE SUBTOOLS WITHOUT THE UI %%%%%%%%%%%% -->
    <target name="deploy_mc" depends="clean-all" description="Builds a jar with all its dependencies for the model checker">
        <antcall target="jar-standalone">
            <param name="libFile" value="libsMC.res"/>
        </antcall>
		<jar destfile="adam_mc.jar">
			<zipfileset includes="**/*.class" src="./adam_core-standalone.jar"
                 excludes="**/graph/**, **/generators/**,
                            **/Adam.class, **/AdamModelChecker.class, **/AdamSynthesizer.class, **/AdamBounded.class"/>
			<zipfileset includes="**/*.stg" src="./adam_core-standalone.jar"/>
		<!--	<zipfileset dir="${libfolder}" includes="quabs_mac" fullpath="lib/quabs_mac"/>
			<zipfileset dir="${libfolder}" includes="quabs_unix" fullpath="lib/quabs_unix"/>-->
			<manifest>
				<attribute name="Main-Class" value="uniolunisaar.adam.main.AdamModelchecker"/>
			</manifest>
		</jar>	
	</target>

	<target name="deploy_synth" depends="clean-all" description="Builds a jar with all its dependencies for the synthesizer">
        <antcall target="jar-standalone">
            <param name="libFile" value="libsSynth.res"/>
        </antcall>
		
		<jar destfile="adam_synt.jar">
			<zipfileset includes="**/*.class" src="./adam_core-standalone.jar"
                  excludes="**/circuits/**, **/graph/**, **/generators/**,
                            **/Adam.class, **/AdamModelChecker.class, **/AdamSynthesizer.class"/>
			<zipfileset includes="**/*.stg" src="./adam_core-standalone.jar"/>
		<!--	<zipfileset dir="${libfolder}" includes="quabs_mac" fullpath="lib/quabs_mac"/>
			<zipfileset dir="${libfolder}" includes="quabs_unix" fullpath="lib/quabs_unix"/>-->
			<manifest>
				<attribute name="Main-Class" value="uniolunisaar.adam.main.AdamSynthesizer"/>
			</manifest>
		</jar>	
	</target>

</project>
